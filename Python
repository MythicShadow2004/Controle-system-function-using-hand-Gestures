import cv2
import mediapipe as mp
import math
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import screen_brightness_control as sbc

# Initialize Mediapipe Hands and Drawing utilities
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.5)

# Function to calculate the distance between two points
def calculate_distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Adjust system volume using pycaw
def set_system_volume(volume):
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, 0, None)
        volume_interface = interface.QueryInterface(IAudioEndpointVolume)
        volume_interface.SetMasterVolumeLevelScalar(volume / 100.0, None)
    except Exception as e:
        print(f"Error setting system volume: {e}")

# Adjust screen brightness using screen_brightness_control
def set_screen_brightness(brightness):
    try:
        sbc.set_brightness(brightness)
    except Exception as e:
        print(f"Error setting screen brightness: {e}")

# Initialize webcam
cap = cv2.VideoCapture(0)

# Variables for volume and brightness control
max_volume_distance = None
min_volume_distance = None
max_brightness_distance = None
min_brightness_distance = None

volume_smoothing_factor = 0.05
brightness_smoothing_factor = 0.05

current_volume = None
current_brightness = None

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        print("Ignoring empty camera frame.")
        continue

    frame = cv2.flip(frame, 1)  # Mirror effect
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)

    # Get frame dimensions
    h, w, _ = frame.shape

    # Draw hand landmarks and sliders
    if result.multi_hand_landmarks:
        for hand_landmarks, handedness in zip(result.multi_hand_landmarks, result.multi_handedness):
            hand_label = handedness.classification[0].label
            thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
            index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]

            thumb_tip_pixel = (int(thumb_tip.x * w), int(thumb_tip.y * h))
            index_tip_pixel = (int(index_tip.x * w), int(index_tip.y * h))

            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            distance = calculate_distance(thumb_tip_pixel, index_tip_pixel)

            if hand_label == 'Right':  # Volume control
                if max_volume_distance is None or min_volume_distance is None:
                    max_volume_distance = distance * 1.2
                    min_volume_distance = distance * 0.8

                normalized_volume = (distance - min_volume_distance) / (max_volume_distance - min_volume_distance)
                normalized_volume = max(0, min(1, normalized_volume))

                if current_volume is None:
                    current_volume = normalized_volume
                current_volume = (1 - volume_smoothing_factor) * current_volume + volume_smoothing_factor * normalized_volume
                set_system_volume(current_volume * 100)

            elif hand_label == 'Left':  # Brightness control
                if max_brightness_distance is None or min_brightness_distance is None:
                    max_brightness_distance = distance * 1.2
                    min_brightness_distance = distance * 0.8

                normalized_brightness = (distance - min_brightness_distance) / (max_brightness_distance - min_brightness_distance)
                normalized_brightness = max(0, min(1, normalized_brightness))

                if current_brightness is None:
                    current_brightness = normalized_brightness
                current_brightness = (1 - brightness_smoothing_factor) * current_brightness + brightness_smoothing_factor * normalized_brightness
                set_screen_brightness(current_brightness * 100)

    # Draw volume slider
    volume_slider_height = int(300 * (current_volume if current_volume else 0))
    cv2.rectangle(frame, (580, 50), (600, 350), (200, 200, 200), 2)
    cv2.rectangle(frame, (580, 350 - volume_slider_height), (600, 350), (0, 255, 0), -1)
    cv2.putText(frame, "Volume", (570, 370), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    # Draw brightness slider
    brightness_slider_height = int(300 * (current_brightness if current_brightness else 0))
    cv2.rectangle(frame, (30, 50), (50, 350), (200, 200, 200), 2)
    cv2.rectangle(frame, (30, 350 - brightness_slider_height), (50, 350), (0, 255, 0), -1)
    cv2.putText(frame, "Brightness", (10, 370), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    cv2.imshow("Hand Gesture Control - Volume & Brightness", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()    
